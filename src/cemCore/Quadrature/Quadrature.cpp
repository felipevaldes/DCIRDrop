#include "Quadrature.h"
#include "cemError.h"


using namespace cem_core;
using cemcommon::Exception;

//************************************************************************************************//
// CLASS: Quadrature
//************************************************************************************************//


//************************************************************************************************//
/** @brief Quadrature::getNumPointsForPolyOrder : Gets the number of points needed for accuracy up
 * to a given polynomial order. If there is no rule that satisfies that accuracy, the number of
 * points of the most accurate rule available is returned.
 * @param order : polynomial order
 * @return : order_to_num_points_.lower_bound(order) */
//************************************************************************************************//
cemINT Quadrature::getNumPointsForPolyOrder(const cemINT& order) const
{
    std::map<cemINT,cemINT>::const_iterator it = order_to_num_points_.lower_bound(order);
    if (it != order_to_num_points_.end())
        return it->second;
    else
        return order_to_num_points_.rbegin()->second;
}


//************************************************************************************************//
/** @brief Quadrature::getNumPointsAbove : Gets the number of points in the quadrature rule whose
 * number of points is greater than the number provided. If there is no such rule, this function
 * returns the number of points of the rule with biggest number of points.
 * @param [in] number : number provided
 * @return : weight_.upper_bound(number)->first */
//************************************************************************************************//
cemINT Quadrature::getNumPointsAbove(const cemINT& number) const
{
    std::map< cemINT,std::vector<cemDOUBLE> >::const_iterator it = weight_.upper_bound(number);
    if (it != weight_.end())
        return it->first;
    else
        return weight_.rbegin()->first;
}


//************************************************************************************************//
/** @brief Quadrature::getNumPointsBelow : Gets the number of points in the quadrature rule whose
 * number of points is less than the number provided. If there is no such rule, this function
 * returns the number of points of the rule with smallest number of points.
 * @param [in] number : number provided
 * @return : --weight_.lower_bound(number)->first */
//************************************************************************************************//
cemINT Quadrature::getNumPointsBelow(const cemINT& number) const
{
    std::map< cemINT,std::vector<cemDOUBLE> >::const_iterator it = weight_.lower_bound(number);
    if (it != weight_.begin())
        return (--it)->first;
    else
        return weight_.begin()->first;
}


//************************************************************************************************//
/** @brief Quadrature::getNumberOfRules : Gets the number of quadrature rules.
 * @return : weight_.size() */
//************************************************************************************************//
cemINT Quadrature::getNumberOfRules() const
{
    return weight_.size();
}


//************************************************************************************************//
/** @brief Quadrature::getKsiCoordinates : Gets a vector of ksi coordinates of the quadrature rule
 * that has at least the number of points provided. If there is no such rule, this function
 * returns the coordinates of the rule with biggest number of points.
 * @param [in] num_points : Minimum number of points for the rule requested.
 * @return : ksi_.lower_bound(num_points)->second */
//************************************************************************************************//
const std::vector<cemDOUBLE>& Quadrature::getKsiCoordinates(const cemINT& num_points) const
{
    if (!using_ksi_)
        throw(Exception("UNDEFINED DATA","This quadrature does not have ksi points"));

    std::map< cemINT,std::vector<cemDOUBLE> >::const_iterator it = ksi_.lower_bound(num_points);
    if (it != ksi_.end())
        return it->second;
    else
        return ksi_.rbegin()->second;
}


//************************************************************************************************//
/** @brief Quadrature::getEtaCoordinates : Gets a vector of eta coordinates of the quadrature rule
 * that has at least the number of points provided. If there is no such rule, this function
 * returns the coordinates of the rule with biggest number of points.
 * @param [in] num_points : Minimum number of points for the rule requested.
 * @return : eta_.lower_bound(num_points)->second */
//************************************************************************************************//
const std::vector<cemDOUBLE>& Quadrature::getEtaCoordinates(const cemINT& num_points) const
{
    if (!using_eta_)
        throw(Exception("UNDEFINED DATA","This quadrature does not have eta points"));

    std::map< cemINT,std::vector<cemDOUBLE> >::const_iterator it = eta_.lower_bound(num_points);
    if (it != eta_.end())
        return it->second;
    else
        return eta_.rbegin()->second;
}


//************************************************************************************************//
/** @brief Quadrature::getZetaCoordinates : Gets a vector of zeta coordinates of the quadrature rule
 * that has at least the number of points provided. If there is no such rule, this function
 * returns the coordinates of the rule with biggest number of points.
 * @param [in] num_points : Minimum number of points for the rule requested.
 * @return : zeta_.lower_bound(num_points)->second */
//************************************************************************************************//
const std::vector<cemDOUBLE>& Quadrature::getZetaCoordinates(const cemINT& num_points) const
{
    if (!using_zeta_)
        throw(Exception("UNDEFINED DATA","This quadrature does not have eta points"));

    std::map< cemINT,std::vector<cemDOUBLE> >::const_iterator it = zeta_.lower_bound(num_points);
    if (it != zeta_.end())
        return it->second;
    else
        return zeta_.rbegin()->second;
}


//************************************************************************************************//
/** @brief Quadrature::getWeights : Gets a vector of weights of the quadrature rule
 * that has at least the number of points provided. If there is no such rule, this function
 * returns the coordinates of the rule with biggest number of points.
 * @param [in] num_points : Minimum number of points for the rule requested.
 * @return : weight_.lower_bound(num_points)->second */
//************************************************************************************************//
const std::vector<cemDOUBLE>& Quadrature::getWeights(const cemINT& num_points) const
{
    std::map< cemINT,std::vector<cemDOUBLE> >::const_iterator it = weight_.lower_bound(num_points);
    if (it != weight_.end())
        return it->second;
    else
        return weight_.rbegin()->second;
}


//************************************************************************************************//
// CLASS: LineQuadrature
//************************************************************************************************//

//************************************************************************************************//
/** @brief LineQuadrature::initialize : Sets quadrature rules for LINE elements.
 * Fills the maps ksi_ and weight_ with quadrature rules for 1, 2, 3, 5, 7, 9, 32, and 100 points.
 * @author Felipe Valdes */
//************************************************************************************************//
void LineQuadrature::initialize()
{
    using_ksi_ = true;

    // 1 Point Rule (Order 1):
    order_to_num_points_[1] = 1;
    ksi_[1].resize(1);
    ksi_[1][0] = 0.0;

    weight_[1].resize(1);
    weight_[1][0] = 2.0;


    // 2 Points Rule (Order 3):
    order_to_num_points_[3] = 2;
    ksi_[2].resize(2);
    ksi_[2][0] =-0.5773502691896257645091488;
    ksi_[2][1] = 0.5773502691896257645091488;

    weight_[2].resize(2);
    weight_[2][0] = 1.0;
    weight_[2][1] = 1.0;


    // 3 Points Rule (Order 5):
    order_to_num_points_[5] = 3;
    ksi_[3].resize(3);
    ksi_[3][0] = -0.7745966692414833770358531;
    ksi_[3][1] = 0.0;
    ksi_[3][2] = 0.7745966692414833770358531;

    weight_[3].resize(3);
    weight_[3][0] = 0.5555555555555555555555556;
    weight_[3][1] = 0.8888888888888888888888889;
    weight_[3][2] = 0.5555555555555555555555556;


    // 5 Points Rule (Order 9):
    order_to_num_points_[9] = 5;
    ksi_[5].resize(5);
    ksi_[5][0] =-0.9061798459386639927976269;
    ksi_[5][1] =-0.5384693101056830910363144;
    ksi_[5][2] = 0.0;
    ksi_[5][3] = 0.5384693101056830910363144;
    ksi_[5][4] = 0.9061798459386639927976269;

    weight_[5].resize(5);
    weight_[5][0] = 0.2369268850561890875142640;
    weight_[5][1] = 0.4786286704993664680412915;
    weight_[5][2] = 0.5688888888888888888888889;
    weight_[5][3] = 0.4786286704993664680412915;
    weight_[5][4] = 0.2369268850561890875142640;


    // 7 Points Rule (Order 13):
    order_to_num_points_[13] = 7;
    ksi_[7].resize(7);
    ksi_[7][0] =-0.9491079123427585245261897;
    ksi_[7][1] =-0.7415311855993944398638648;
    ksi_[7][2] =-0.4058451513773971669066064;
    ksi_[7][3] = 0.0;
    ksi_[7][4] = 0.4058451513773971669066064;
    ksi_[7][5] = 0.7415311855993944398638648;
    ksi_[7][6] = 0.9491079123427585245261897;

    weight_[7].resize(7);
    weight_[7][0] = 0.1294849661688696932706114;
    weight_[7][1] = 0.2797053914892766679014678;
    weight_[7][2] = 0.3818300505051189449503698;
    weight_[7][3] = 0.4179591836734693877551020;
    weight_[7][4] = 0.3818300505051189449503698;
    weight_[7][5] = 0.2797053914892766679014678;
    weight_[7][6] = 0.1294849661688696932706114;


    // 9 Points Rule (Order 17):
    order_to_num_points_[17] = 9;
    ksi_[9].resize(9);
    ksi_[9][0] =-0.9681602395076260898355762;
    ksi_[9][1] =-0.8360311073266357942994298;
    ksi_[9][2] =-0.6133714327005903973087020;
    ksi_[9][3] =-0.3242534234038089290385380;
    ksi_[9][4] = 0.0;
    ksi_[9][5] = 0.3242534234038089290385380;
    ksi_[9][6] = 0.6133714327005903973087020;
    ksi_[9][7] = 0.8360311073266357942994298;
    ksi_[9][8] = 0.9681602395076260898355762;

    weight_[9].resize(9);
    weight_[9][0] = 0.0812743883615744119718922;
    weight_[9][1] = 0.1806481606948574040584720;
    weight_[9][2] = 0.2606106964029354623187429;
    weight_[9][3] = 0.3123470770400028400686304;
    weight_[9][4] = 0.3302393550012597631645251;
    weight_[9][5] = 0.3123470770400028400686304;
    weight_[9][6] = 0.2606106964029354623187429;
    weight_[9][7] = 0.1806481606948574040584720;
    weight_[9][8] = 0.0812743883615744119718922;


    // 32 Points Rule (Order 63):
    order_to_num_points_[63] = 32;
    ksi_[32].resize(32);
    ksi_[32][0] = -0.9972638618494815635449811;
    ksi_[32][1] = -0.9856115115452683354001750;
    ksi_[32][2] = -0.9647622555875064307738119;
    ksi_[32][3] = -0.9349060759377396891709191;
    ksi_[32][4] = -0.8963211557660521239653072;
    ksi_[32][5] = -0.8493676137325699701336930;
    ksi_[32][6] = -0.7944837959679424069630973;
    ksi_[32][7] = -0.7321821187402896803874267;
    ksi_[32][8] = -0.6630442669302152009751152;
    ksi_[32][9] = -0.5877157572407623290407455;
    ksi_[32][10] = -0.5068999089322293900237475;
    ksi_[32][11] = -0.4213512761306353453641194;
    ksi_[32][12] = -0.3318686022821276497799168;
    ksi_[32][13] = -0.2392873622521370745446032;
    ksi_[32][14] = -0.1444719615827964934851864;
    ksi_[32][15] = -0.0483076656877383162348126;
    ksi_[32][16] = -ksi_[32][15];
    ksi_[32][17] = -ksi_[32][14];
    ksi_[32][18] = -ksi_[32][13];
    ksi_[32][19] = -ksi_[32][12];
    ksi_[32][20] = -ksi_[32][11];
    ksi_[32][21] = -ksi_[32][10];
    ksi_[32][22] = -ksi_[32][9];
    ksi_[32][23] = -ksi_[32][8];
    ksi_[32][24] = -ksi_[32][7];
    ksi_[32][25] = -ksi_[32][6];
    ksi_[32][26] = -ksi_[32][5];
    ksi_[32][27] = -ksi_[32][4];
    ksi_[32][28] = -ksi_[32][3];
    ksi_[32][29] = -ksi_[32][2];
    ksi_[32][30] = -ksi_[32][1];
    ksi_[32][31] = -ksi_[32][0];

    weight_[32].resize(32);
    weight_[32][0] = 0.0070186100094700966004071;
    weight_[32][1] = 0.0162743947309056706051706;
    weight_[32][2] = 0.0253920653092620594557526;
    weight_[32][3] = 0.0342738629130214331026877;
    weight_[32][4] = 0.0428358980222266806568786;
    weight_[32][5] = 0.0509980592623761761961632;
    weight_[32][6] = 0.0586840934785355471452836;
    weight_[32][7] = 0.0658222227763618468376501;
    weight_[32][8] = 0.0723457941088485062253994;
    weight_[32][9] = 0.0781938957870703064717409;
    weight_[32][10] = 0.0833119242269467552221991;
    weight_[32][11] = 0.0876520930044038111427715;
    weight_[32][12] = 0.0911738786957638847128686;
    weight_[32][13] = 0.0938443990808045656391802;
    weight_[32][14] = 0.0956387200792748594190820;
    weight_[32][15] = 0.0965400885147278005667648;
    weight_[32][16] = weight_[32][15];
    weight_[32][17] = weight_[32][14];
    weight_[32][18] = weight_[32][13];
    weight_[32][19] = weight_[32][12];
    weight_[32][20] = weight_[32][11];
    weight_[32][21] = weight_[32][10];
    weight_[32][22] = weight_[32][9];
    weight_[32][23] = weight_[32][8];
    weight_[32][24] = weight_[32][7];
    weight_[32][25] = weight_[32][6];
    weight_[32][26] = weight_[32][5];
    weight_[32][27] = weight_[32][4];
    weight_[32][28] = weight_[32][3];
    weight_[32][29] = weight_[32][2];
    weight_[32][30] = weight_[32][1];
    weight_[32][31] = weight_[32][0];


    // 100 Points Rule (Order 199):
    order_to_num_points_[199] = 100;
    ksi_[100].resize(100);
    ksi_[100][0] = -0.9997137267734412336782285;
    ksi_[100][1] = -0.9984919506395958184001634;
    ksi_[100][2] = -0.9962951347331251491861317;
    ksi_[100][3] = -0.9931249370374434596520099;
    ksi_[100][4] = -0.9889843952429917480044187;
    ksi_[100][5] = -0.9838775407060570154961002;
    ksi_[100][6] = -0.9778093584869182885537811;
    ksi_[100][7] = -0.9707857757637063319308979;
    ksi_[100][8] = -0.9628136542558155272936593;
    ksi_[100][9] = -0.9539007829254917428493369;
    ksi_[100][10] = -0.9440558701362559779627747;
    ksi_[100][11] = -0.9332885350430795459243337;
    ksi_[100][12] = -0.9216092981453339526669513;
    ksi_[100][13] = -0.9090295709825296904671263,
    ksi_[100][14] = -0.8955616449707269866985210;
    ksi_[100][15] = -0.8812186793850184155733168;
    ksi_[100][16] = -0.8660146884971646234107400;
    ksi_[100][17] = -0.8499645278795912842933626;
    ksi_[100][18] = -0.8330838798884008235429158;
    ksi_[100][19] = -0.8153892383391762543939888;
    ksi_[100][20] = -0.7968978923903144763895729;
    ksi_[100][21] = -0.7776279096494954756275514;
    ksi_[100][22] = -0.7575981185197071760356680;
    ksi_[100][23] = -0.7368280898020207055124277;
    ksi_[100][24] = -0.7153381175730564464599671;
    ksi_[100][25] = -0.6931491993558019659486479;
    ksi_[100][26] = -0.6702830156031410158025870;
    ksi_[100][27] = -0.6467619085141292798326303;
    ksi_[100][28] = -0.6226088602037077716041908;
    ksi_[100][29] = -0.5978474702471787212648065;
    ksi_[100][30] = -0.5725019326213811913168704;
    ksi_[100][31] = -0.5465970120650941674679943;
    ksi_[100][32] = -0.5201580198817630566468157;
    ksi_[100][33] = -0.4932107892081909335693088;
    ksi_[100][34] = -0.4657816497733580422492166;
    ksi_[100][35] = -0.4378974021720315131089780;
    ksi_[100][36] = -0.4095852916783015425288684;
    ksi_[100][37] = -0.3808729816246299567633625;
    ksi_[100][38] = -0.3517885263724217209723438;
    ksi_[100][39] = -0.3223603439005291517224766;
    ksi_[100][40] = -0.2926171880384719647375559;
    ksi_[100][41] = -0.2625881203715034791689293;
    ksi_[100][42] = -0.2323024818449739696495100;
    ksi_[100][43] = -0.2017898640957359972360489;
    ksi_[100][44] = -0.1710800805386032748875324;
    ksi_[100][45] = -0.1402031372361139732075146;
    ksi_[100][46] = -0.1091892035800611150034260;
    ksi_[100][47] = -0.0780685828134366366948174;
    ksi_[100][48] = -0.0468716824215916316149239;
    ksi_[100][49] = -0.0156289844215430828722167;
    ksi_[100][50] = -ksi_[100][49];
    ksi_[100][51] = -ksi_[100][48];
    ksi_[100][52] = -ksi_[100][47];
    ksi_[100][53] = -ksi_[100][46];
    ksi_[100][54] = -ksi_[100][45];
    ksi_[100][55] = -ksi_[100][44];
    ksi_[100][56] = -ksi_[100][43];
    ksi_[100][57] = -ksi_[100][42];
    ksi_[100][58] = -ksi_[100][41];
    ksi_[100][59] = -ksi_[100][40];
    ksi_[100][60] = -ksi_[100][39];
    ksi_[100][61] = -ksi_[100][38];
    ksi_[100][62] = -ksi_[100][37];
    ksi_[100][63] = -ksi_[100][36];
    ksi_[100][64] = -ksi_[100][35];
    ksi_[100][65] = -ksi_[100][34];
    ksi_[100][66] = -ksi_[100][33];
    ksi_[100][67] = -ksi_[100][32];
    ksi_[100][68] = -ksi_[100][31];
    ksi_[100][69] = -ksi_[100][30];
    ksi_[100][70] = -ksi_[100][29];
    ksi_[100][71] = -ksi_[100][28];
    ksi_[100][72] = -ksi_[100][27];
    ksi_[100][73] = -ksi_[100][26];
    ksi_[100][74] = -ksi_[100][25];
    ksi_[100][75] = -ksi_[100][24];
    ksi_[100][76] = -ksi_[100][23];
    ksi_[100][77] = -ksi_[100][22];
    ksi_[100][78] = -ksi_[100][21];
    ksi_[100][79] = -ksi_[100][20];
    ksi_[100][80] = -ksi_[100][19];
    ksi_[100][81] = -ksi_[100][18];
    ksi_[100][82] = -ksi_[100][17];
    ksi_[100][83] = -ksi_[100][16];
    ksi_[100][84] = -ksi_[100][15];
    ksi_[100][85] = -ksi_[100][14];
    ksi_[100][86] = -ksi_[100][13];
    ksi_[100][87] = -ksi_[100][12];
    ksi_[100][88] = -ksi_[100][11];
    ksi_[100][89] = -ksi_[100][10];
    ksi_[100][90] = -ksi_[100][9];
    ksi_[100][91] = -ksi_[100][8];
    ksi_[100][92] = -ksi_[100][7];
    ksi_[100][93] = -ksi_[100][6];
    ksi_[100][94] = -ksi_[100][5];
    ksi_[100][95] = -ksi_[100][4];
    ksi_[100][96] = -ksi_[100][3];
    ksi_[100][97] = -ksi_[100][2];
    ksi_[100][98] = -ksi_[100][1];
    ksi_[100][99] = -ksi_[100][0];

    weight_[100].resize(100);
    weight_[100][0] = 0.0007346344905056717304063;
    weight_[100][1] = 0.0017093926535181052395294;
    weight_[100][2] = 0.0026839253715534824194396;
    weight_[100][3] = 0.0036559612013263751823425;
    weight_[100][4] = 0.0046244500634221193510958;
    weight_[100][5] = 0.0055884280038655151572119;
    weight_[100][6] = 0.0065469484508453227641521;
    weight_[100][7] = 0.0074990732554647115788287;
    weight_[100][8] = 0.0084438714696689714026208;
    weight_[100][9] = 0.0093804196536944579514182;
    weight_[100][10] = 0.0103078025748689695857821;
    weight_[100][11] = 0.0112251140231859771172216;
    weight_[100][12] = 0.0121314576629794974077448;
    weight_[100][13] = 0.0130259478929715422855586;
    weight_[100][14] = 0.0139077107037187726879541;
    weight_[100][15] = 0.0147758845274413017688800;
    weight_[100][16] = 0.0156296210775460027239369;
    weight_[100][17] = 0.0164680861761452126431050;
    weight_[100][18] = 0.0172904605683235824393442;
    weight_[100][19] = 0.0180959407221281166643908;
    weight_[100][20] = 0.0188837396133749045529412;
    weight_[100][21] = 0.0196530874944353058653815;
    weight_[100][22] = 0.0204032326462094327668389;
    weight_[100][23] = 0.0211334421125276415426723;
    weight_[100][24] = 0.0218430024162473863139537;
    weight_[100][25] = 0.0225312202563362727017970;
    weight_[100][26] = 0.0231974231852541216224889;
    weight_[100][27] = 0.0238409602659682059625604;
    weight_[100][28] = 0.0244612027079570527199750;
    weight_[100][29] = 0.0250575444815795897037642;
    weight_[100][30] = 0.0256294029102081160756420;
    weight_[100][31] = 0.0261762192395456763423087;
    weight_[100][32] = 0.0266974591835709626603847;
    weight_[100][33] = 0.0271926134465768801364916;
    weight_[100][34] = 0.0276611982207923882942042;
    weight_[100][35] = 0.0281027556591011733176483;
    weight_[100][36] = 0.0285168543223950979909368;
    weight_[100][37] = 0.0289030896011252031348762;
    weight_[100][38] = 0.0292610841106382766201190;
    weight_[100][39] = 0.0295904880599126425117545;
    weight_[100][40] = 0.0298909795933328309168368;
    weight_[100][41] = 0.0301622651051691449190687;
    weight_[100][42] = 0.0304040795264548200165079;
    weight_[100][43] = 0.0306161865839804484964594;
    weight_[100][44] = 0.0307983790311525904277139;
    weight_[100][45] = 0.0309504788504909882340635;
    weight_[100][46] = 0.0310723374275665165878102;
    weight_[100][47] = 0.0311638356962099067838183;
    weight_[100][48] = 0.0312248842548493577323765;
    weight_[100][49] = 0.0312554234538633569476425;
    weight_[100][50] = weight_[100][49];
    weight_[100][51] = weight_[100][48];
    weight_[100][52] = weight_[100][47];
    weight_[100][53] = weight_[100][46];
    weight_[100][54] = weight_[100][45];
    weight_[100][55] = weight_[100][44];
    weight_[100][56] = weight_[100][43];
    weight_[100][57] = weight_[100][42];
    weight_[100][58] = weight_[100][41];
    weight_[100][59] = weight_[100][40];
    weight_[100][60] = weight_[100][39];
    weight_[100][61] = weight_[100][38];
    weight_[100][62] = weight_[100][37];
    weight_[100][63] = weight_[100][36];
    weight_[100][64] = weight_[100][35];
    weight_[100][65] = weight_[100][34];
    weight_[100][66] = weight_[100][33];
    weight_[100][67] = weight_[100][32];
    weight_[100][68] = weight_[100][31];
    weight_[100][69] = weight_[100][30];
    weight_[100][70] = weight_[100][29];
    weight_[100][71] = weight_[100][28];
    weight_[100][72] = weight_[100][27];
    weight_[100][73] = weight_[100][26];
    weight_[100][74] = weight_[100][25];
    weight_[100][75] = weight_[100][24];
    weight_[100][76] = weight_[100][23];
    weight_[100][77] = weight_[100][22];
    weight_[100][78] = weight_[100][21];
    weight_[100][79] = weight_[100][20];
    weight_[100][80] = weight_[100][19];
    weight_[100][81] = weight_[100][18];
    weight_[100][82] = weight_[100][17];
    weight_[100][83] = weight_[100][16];
    weight_[100][84] = weight_[100][15];
    weight_[100][85] = weight_[100][14];
    weight_[100][86] = weight_[100][13];
    weight_[100][87] = weight_[100][12];
    weight_[100][88] = weight_[100][11];
    weight_[100][89] = weight_[100][10];
    weight_[100][90] = weight_[100][9];
    weight_[100][91] = weight_[100][8];
    weight_[100][92] = weight_[100][7];
    weight_[100][93] = weight_[100][6];
    weight_[100][94] = weight_[100][5];
    weight_[100][95] = weight_[100][4];
    weight_[100][96] = weight_[100][3];
    weight_[100][97] = weight_[100][2];
    weight_[100][98] = weight_[100][1];
    weight_[100][99] = weight_[100][0];
}



//************************************************************************************************//
// CLASS: TriQuadrature
//************************************************************************************************//

//************************************************************************************************//
/** @brief TriQuadrature::initialize : Sets quadrature rules for TRIANGLE elements.
 * Fills the maps ksi_, eta_, anf weight_ with quadrature rules for 1, 3, 6, 12, 13, 16,
 * 19, 25, 33, 37, and 42 points.
 * @author Felipe Valdes */
//************************************************************************************************//
void TriQuadrature::initialize()
{
    using_ksi_ = true;
    using_eta_ = true;

    // 1 Point Rule (Order 1):
    order_to_num_points_[1] = 1;
    ksi_[1].resize(1);
    ksi_[1][0] = 1.0/3.0;

    eta_[1].resize(1);
    eta_[1][0] = 1.0/3.0;

    weight_[1].resize(1);
    weight_[1][0] = 1.0;


    // 3 Point Rule (Order 2):
    order_to_num_points_[2] = 3;
    ksi_[3].resize(3);
    ksi_[3][0] = 2.0/3.0;
    ksi_[3][1] = 1.0/6.0;
    ksi_[3][2] = 1.0/6.0;

    eta_[3].resize(3);
    eta_[3][0] = 1.0/6.0;
    eta_[3][1] = 2.0/3.0;
    eta_[3][2] = 1.0/6.0;

    weight_[3].resize(3);
    weight_[3][0] = 1.0/3.0;
    weight_[3][1] = 1.0/3.0;
    weight_[3][2] = 1.0/3.0;


    // 6 Point Rule (Order 4):
    order_to_num_points_[4] = 6;
    ksi_[6].resize(6);
    ksi_[6][0] = 0.108103018168070;
    ksi_[6][1] = 0.445948490915965;
    ksi_[6][2] = 0.445948490915965;
    ksi_[6][3] = 0.816847572980459;
    ksi_[6][4] = 0.091576213509771;
    ksi_[6][5] = 0.091576213509771;

    eta_[6].resize(6);
    eta_[6][0] = 0.445948490915965;
    eta_[6][1] = 0.445948490915965;
    eta_[6][2] = 0.108103018168070;
    eta_[6][3] = 0.091576213509771;
    eta_[6][4] = 0.091576213509771;
    eta_[6][5] = 0.816847572980459;

    weight_[6].resize(6);
    weight_[6][0] = 0.223381589678011;
    weight_[6][1] = 0.223381589678011;
    weight_[6][2] = 0.223381589678011;
    weight_[6][3] = 0.109951743655322;
    weight_[6][4] = 0.109951743655322;
    weight_[6][5] = 0.109951743655322;


    // 12 Point Rule (Order 6):
    order_to_num_points_[6] = 12;
    ksi_[12].resize(12);
    ksi_[12][0] = 0.501426509658179;
    ksi_[12][1] = 0.249286745170910;
    ksi_[12][2] = 0.249286745170910;
    ksi_[12][3] = 0.873821971016996;
    ksi_[12][4] = 0.063089014491502;
    ksi_[12][5] = 0.063089014491502;
    ksi_[12][6] = 0.053145049844817;
    ksi_[12][7] = 0.310352451033784;
    ksi_[12][8] = 0.636502499121399;
    ksi_[12][9] = 0.310352451033784;
    ksi_[12][10] = 0.636502499121399;
    ksi_[12][11] = 0.053145049844817;

    eta_[12].resize(12);
    eta_[12][0] = 0.249286745170910;
    eta_[12][1] = 0.249286745170910;
    eta_[12][2] = 0.501426509658179;
    eta_[12][3] = 0.063089014491502;
    eta_[12][4] = 0.063089014491502;
    eta_[12][5] = 0.873821971016996;
    eta_[12][6] = 0.310352451033784;
    eta_[12][7] = 0.636502499121399;
    eta_[12][8] = 0.053145049844817;
    eta_[12][9] = 0.053145049844817;
    eta_[12][10] = 0.310352451033784;
    eta_[12][11] = 0.636502499121399;

    weight_[12].resize(12);
    weight_[12][0] = 0.116786275726379;
    weight_[12][1] = 0.116786275726379;
    weight_[12][2] = 0.116786275726379;
    weight_[12][3] = 0.050844906370207;
    weight_[12][4] = 0.050844906370207;
    weight_[12][5] = 0.050844906370207;
    weight_[12][6] = 0.082851075618374;
    weight_[12][7] = 0.082851075618374;
    weight_[12][8] = 0.082851075618374;
    weight_[12][9] = 0.082851075618374;
    weight_[12][10] = 0.082851075618374;
    weight_[12][11] = 0.082851075618374;


    // 13 Point Rule (Order 7):
    order_to_num_points_[7] = 13;
    ksi_[13].resize(13);
    ksi_[13][0] = 0.333333333333333;
    ksi_[13][1] = 0.479308067841920;
    ksi_[13][2] = 0.260345966079040;
    ksi_[13][3] = 0.260345966079040;
    ksi_[13][4] = 0.869739794195568;
    ksi_[13][5] = 0.065130102902216;
    ksi_[13][6] = 0.065130102902216;
    ksi_[13][7] = 0.048690315425316;
    ksi_[13][8] = 0.312865496004874;
    ksi_[13][9] = 0.638444188569810;
    ksi_[13][10] = 0.312865496004874;
    ksi_[13][11] = 0.638444188569810;
    ksi_[13][12] = 0.048690315425316;

    eta_[13].resize(13);
    eta_[13][0] = 0.333333333333333;
    eta_[13][1] = 0.260345966079040;
    eta_[13][2] = 0.260345966079040;
    eta_[13][3] = 0.479308067841920;
    eta_[13][4] = 0.065130102902216;
    eta_[13][5] = 0.065130102902216;
    eta_[13][6] = 0.869739794195568;
    eta_[13][7] = 0.312865496004874;
    eta_[13][8] = 0.638444188569810;
    eta_[13][9] = 0.048690315425316;
    eta_[13][10] = 0.048690315425316;
    eta_[13][11] = 0.312865496004874;
    eta_[13][12] = 0.638444188569810;

    weight_[13].resize(13);
    weight_[13][0] = -.149570044467682;
    weight_[13][1] = 0.175615257433208;
    weight_[13][2] = 0.175615257433208;
    weight_[13][3] = 0.175615257433208;
    weight_[13][4] = 0.053347235608838;
    weight_[13][5] = 0.053347235608838;
    weight_[13][6] = 0.053347235608838;
    weight_[13][7] = 0.077113760890257;
    weight_[13][8] = 0.077113760890257;
    weight_[13][9] = 0.077113760890257;
    weight_[13][10] = 0.077113760890257;
    weight_[13][11] = 0.077113760890257;
    weight_[13][12] = 0.077113760890257;


    // 16 Point Rule (Order 8):
    order_to_num_points_[8] = 16;
    ksi_[16].resize(16);
    ksi_[16][0] = 0.333333333333333;
    ksi_[16][1] = 0.081414823414554;
    ksi_[16][2] = 0.459292588292723;
    ksi_[16][3] = 0.459292588292723;
    ksi_[16][4] = 0.658861384496480;
    ksi_[16][5] = 0.170569307751760;
    ksi_[16][6] = 0.170569307751760;
    ksi_[16][7] = 0.898905543365938;
    ksi_[16][8] = 0.050547228317031;
    ksi_[16][9] = 0.050547228317031;
    ksi_[16][10] = 0.008394777409958;
    ksi_[16][11] = 0.263112829634638;
    ksi_[16][12] = 0.728492392955404;
    ksi_[16][13] = 0.263112829634638;
    ksi_[16][14] = 0.728492392955404;
    ksi_[16][15] = 0.008394777409958;

    eta_[16].resize(16);
    eta_[16][0] = 0.333333333333333;
    eta_[16][1] = 0.459292588292723;
    eta_[16][2] = 0.459292588292723;
    eta_[16][3] = 0.081414823414554;
    eta_[16][4] = 0.170569307751760;
    eta_[16][5] = 0.170569307751760;
    eta_[16][6] = 0.658861384496480;
    eta_[16][7] = 0.050547228317031;
    eta_[16][8] = 0.050547228317031;
    eta_[16][9] = 0.898905543365938;
    eta_[16][10] = 0.263112829634638;
    eta_[16][11] = 0.728492392955404;
    eta_[16][12] = 0.008394777409958;
    eta_[16][13] = 0.008394777409958;
    eta_[16][14] = 0.263112829634638;
    eta_[16][15] = 0.728492392955404;

    weight_[16].resize(16);
    weight_[16][0] = 0.144315607677787;
    weight_[16][1] = 0.095091634267285;
    weight_[16][2] = 0.095091634267285;
    weight_[16][3] = 0.095091634267285;
    weight_[16][4] = 0.103217370534718;
    weight_[16][5] = 0.103217370534718;
    weight_[16][6] = 0.103217370534718;
    weight_[16][7] = 0.032458497623198;
    weight_[16][8] = 0.032458497623198;
    weight_[16][9] = 0.032458497623198;
    weight_[16][10] = 0.027230314174435;
    weight_[16][11] = 0.027230314174435;
    weight_[16][12] = 0.027230314174435;
    weight_[16][13] = 0.027230314174435;
    weight_[16][14] = 0.027230314174435;
    weight_[16][15] = 0.027230314174435;


    // 19 Point Rule (Order 9):
    order_to_num_points_[9] = 19;
    ksi_[19].resize(19);
    ksi_[19][0] = 0.333333333333333;
    ksi_[19][1] = 0.020634961602525;
    ksi_[19][2] = 0.489682519198738;
    ksi_[19][3] = 0.489682519198738;
    ksi_[19][4] = 0.125820817014127;
    ksi_[19][5] = 0.437089591492937;
    ksi_[19][6] = 0.437089591492937;
    ksi_[19][7] = 0.623592928761935;
    ksi_[19][8] = 0.188203535619033;
    ksi_[19][9] = 0.188203535619033;
    ksi_[19][10] = 0.910540973211095;
    ksi_[19][11] = 0.044729513394453;
    ksi_[19][12] = 0.044729513394453;
    ksi_[19][13] = 0.036838412054736;
    ksi_[19][14] = 0.221962989160766;
    ksi_[19][15] = 0.741198598784498;
    ksi_[19][16] = 0.221962989160766;
    ksi_[19][17] = 0.741198598784498;
    ksi_[19][18] = 0.036838412054736;

    eta_[19].resize(19);
    eta_[19][0] = 0.333333333333333;
    eta_[19][1] = 0.489682519198738;
    eta_[19][2] = 0.489682519198738;
    eta_[19][3] = 0.020634961602525;
    eta_[19][4] = 0.437089591492937;
    eta_[19][5] = 0.437089591492937;
    eta_[19][6] = 0.125820817014127;
    eta_[19][7] = 0.188203535619033;
    eta_[19][8] = 0.188203535619033;
    eta_[19][9] = 0.623592928761935;
    eta_[19][10] = 0.044729513394453;
    eta_[19][11] = 0.044729513394453;
    eta_[19][12] = 0.910540973211095;
    eta_[19][13] = 0.221962989160766;
    eta_[19][14] = 0.741198598784498;
    eta_[19][15] = 0.036838412054736;
    eta_[19][16] = 0.036838412054736;
    eta_[19][17] = 0.221962989160766;
    eta_[19][18] = 0.741198598784498;

    weight_[19].resize(19);
    weight_[19][0] = 0.097135796282799;
    weight_[19][1] = 0.031334700227139;
    weight_[19][2] = 0.031334700227139;
    weight_[19][3] = 0.031334700227139;
    weight_[19][4] = 0.077827541004774;
    weight_[19][5] = 0.077827541004774;
    weight_[19][6] = 0.077827541004774;
    weight_[19][7] = 0.079647738927210;
    weight_[19][8] = 0.079647738927210;
    weight_[19][9] = 0.079647738927210;
    weight_[19][10] = 0.025577675658698;
    weight_[19][11] = 0.025577675658698;
    weight_[19][12] = 0.025577675658698;
    weight_[19][13] = 0.043283539377289;
    weight_[19][14] = 0.043283539377289;
    weight_[19][15] = 0.043283539377289;
    weight_[19][16] = 0.043283539377289;
    weight_[19][17] = 0.043283539377289;
    weight_[19][18] = 0.043283539377289;


    // 25 Point Rule (Order 10):
    order_to_num_points_[10] = 25;
    ksi_[25].resize(25);
    ksi_[25][0] = 0.333333333333333;
    ksi_[25][1] = 0.028844733232685;
    ksi_[25][2] = 0.485577633383657;
    ksi_[25][3] = 0.485577633383657;
    ksi_[25][4] = 0.781036849029926;
    ksi_[25][5] = 0.109481575485037;
    ksi_[25][6] = 0.109481575485037;
    ksi_[25][7] = 0.141707219414880;
    ksi_[25][8] = 0.307939838764121;
    ksi_[25][9] = 0.550352941820999;
    ksi_[25][10] = 0.307939838764121;
    ksi_[25][11] = 0.550352941820999;
    ksi_[25][12] = 0.141707219414880;
    ksi_[25][13] = 0.025003534762686;
    ksi_[25][14] = 0.246672560639903;
    ksi_[25][15] = 0.728323904597411;
    ksi_[25][16] = 0.246672560639903;
    ksi_[25][17] = 0.728323904597411;
    ksi_[25][18] = 0.025003534762686;
    ksi_[25][19] = 0.009540815400299;
    ksi_[25][20] = 0.066803251012200;
    ksi_[25][21] = 0.923655933587500;
    ksi_[25][22] = 0.066803251012200;
    ksi_[25][23] = 0.923655933587500;
    ksi_[25][24] = 0.009540815400299;

    eta_[25].resize(25);
    eta_[25][0] = 0.333333333333333;
    eta_[25][1] = 0.485577633383657;
    eta_[25][2] = 0.485577633383657;
    eta_[25][3] = 0.028844733232685;
    eta_[25][4] = 0.109481575485037;
    eta_[25][5] = 0.109481575485037;
    eta_[25][6] = 0.781036849029926;
    eta_[25][7] = 0.307939838764121;
    eta_[25][8] = 0.550352941820999;
    eta_[25][9] = 0.141707219414880;
    eta_[25][10] = 0.141707219414880;
    eta_[25][11] = 0.307939838764121;
    eta_[25][12] = 0.550352941820999;
    eta_[25][13] = 0.246672560639903;
    eta_[25][14] = 0.728323904597411;
    eta_[25][15] = 0.025003534762686;
    eta_[25][16] = 0.025003534762686;
    eta_[25][17] = 0.246672560639903;
    eta_[25][18] = 0.728323904597411;
    eta_[25][19] = 0.066803251012200;
    eta_[25][20] = 0.923655933587500;
    eta_[25][21] = 0.009540815400299;
    eta_[25][22] = 0.009540815400299;
    eta_[25][23] = 0.066803251012200;
    eta_[25][24] = 0.923655933587500;

    weight_[25].resize(25);
    weight_[25][0] = 0.090817990382754;
    weight_[25][1] = 0.036725957756467;
    weight_[25][2] = 0.036725957756467;
    weight_[25][3] = 0.036725957756467;
    weight_[25][4] = 0.045321059435528;
    weight_[25][5] = 0.045321059435528;
    weight_[25][6] = 0.045321059435528;
    weight_[25][7] = 0.072757916845420;
    weight_[25][8] = 0.072757916845420;
    weight_[25][9] = 0.072757916845420;
    weight_[25][10] = 0.072757916845420;
    weight_[25][11] = 0.072757916845420;
    weight_[25][12] = 0.072757916845420;
    weight_[25][13] = 0.028327242531057;
    weight_[25][14] = 0.028327242531057;
    weight_[25][15] = 0.028327242531057;
    weight_[25][16] = 0.028327242531057;
    weight_[25][17] = 0.028327242531057;
    weight_[25][18] = 0.028327242531057;
    weight_[25][19] = 0.009421666963733;
    weight_[25][20] = 0.009421666963733;
    weight_[25][21] = 0.009421666963733;
    weight_[25][22] = 0.009421666963733;
    weight_[25][23] = 0.009421666963733;
    weight_[25][24] = 0.009421666963733;


    // 33 Point Rule (Order 12):
    order_to_num_points_[12] = 33;
    ksi_[33].resize(33);
    ksi_[33][0] = 0.023565220452390;
    ksi_[33][1] = 0.488217389773805;
    ksi_[33][2] = 0.488217389773805;
    ksi_[33][3] = 0.120551215411079;
    ksi_[33][4] = 0.439724392294460;
    ksi_[33][5] = 0.439724392294460;
    ksi_[33][6] = 0.457579229975768;
    ksi_[33][7] = 0.271210385012116;
    ksi_[33][8] = 0.271210385012116;
    ksi_[33][9] = 0.744847708916828;
    ksi_[33][10] = 0.127576145541586;
    ksi_[33][11] = 0.127576145541586;
    ksi_[33][12] = 0.957365299093579;
    ksi_[33][13] = 0.021317350453210;
    ksi_[33][14] = 0.021317350453210;
    ksi_[33][15] = 0.115343494534698;
    ksi_[33][16] = 0.275713269685514;
    ksi_[33][17] = 0.608943235779788;
    ksi_[33][18] = 0.275713269685514;
    ksi_[33][19] = 0.608943235779788;
    ksi_[33][20] = 0.115343494534698;
    ksi_[33][21] = 0.022838332222257;
    ksi_[33][22] = 0.281325580989940;
    ksi_[33][23] = 0.695836086787803;
    ksi_[33][24] = 0.281325580989940;
    ksi_[33][25] = 0.695836086787803;
    ksi_[33][26] = 0.022838332222257;
    ksi_[33][27] = 0.025734050548330;
    ksi_[33][28] = 0.116251915907597;
    ksi_[33][29] = 0.858014033544073;
    ksi_[33][30] = 0.116251915907597;
    ksi_[33][31] = 0.858014033544073;
    ksi_[33][32] = 0.025734050548330;

    eta_[33].resize(33);
    eta_[33][0] = 0.488217389773805;
    eta_[33][1] = 0.488217389773805;
    eta_[33][2] = 0.023565220452390;
    eta_[33][3] = 0.439724392294460;
    eta_[33][4] = 0.439724392294460;
    eta_[33][5] = 0.120551215411079;
    eta_[33][6] = 0.271210385012116;
    eta_[33][7] = 0.271210385012116;
    eta_[33][8] = 0.457579229975768;
    eta_[33][9] = 0.127576145541586;
    eta_[33][10] = 0.127576145541586;
    eta_[33][11] = 0.744847708916828;
    eta_[33][12] = 0.021317350453210;
    eta_[33][13] = 0.021317350453210;
    eta_[33][14] = 0.957365299093579;
    eta_[33][15] = 0.275713269685514;
    eta_[33][16] = 0.608943235779788;
    eta_[33][17] = 0.115343494534698;
    eta_[33][18] = 0.115343494534698;
    eta_[33][19] = 0.275713269685514;
    eta_[33][20] = 0.608943235779788;
    eta_[33][21] = 0.281325580989940;
    eta_[33][22] = 0.695836086787803;
    eta_[33][23] = 0.022838332222257;
    eta_[33][24] = 0.022838332222257;
    eta_[33][25] = 0.281325580989940;
    eta_[33][26] = 0.695836086787803;
    eta_[33][27] = 0.116251915907597;
    eta_[33][28] = 0.858014033544073;
    eta_[33][29] = 0.025734050548330;
    eta_[33][30] = 0.025734050548330;
    eta_[33][31] = 0.116251915907597;
    eta_[33][32] = 0.858014033544073;

    weight_[33].resize(33);
    weight_[33][0] = 0.025731066440455;
    weight_[33][1] = 0.025731066440455;
    weight_[33][2] = 0.025731066440455;
    weight_[33][3] = 0.043692544538038;
    weight_[33][4] = 0.043692544538038;
    weight_[33][5] = 0.043692544538038;
    weight_[33][6] = 0.062858224217885;
    weight_[33][7] = 0.062858224217885;
    weight_[33][8] = 0.062858224217885;
    weight_[33][9] = 0.034796112930709;
    weight_[33][10] = 0.034796112930709;
    weight_[33][11] = 0.034796112930709;
    weight_[33][12] = 0.006166261051559;
    weight_[33][13] = 0.006166261051559;
    weight_[33][14] = 0.006166261051559;
    weight_[33][15] = 0.040371557766381;
    weight_[33][16] = 0.040371557766381;
    weight_[33][17] = 0.040371557766381;
    weight_[33][18] = 0.040371557766381;
    weight_[33][19] = 0.040371557766381;
    weight_[33][20] = 0.040371557766381;
    weight_[33][21] = 0.022356773202303;
    weight_[33][22] = 0.022356773202303;
    weight_[33][23] = 0.022356773202303;
    weight_[33][24] = 0.022356773202303;
    weight_[33][25] = 0.022356773202303;
    weight_[33][26] = 0.022356773202303;
    weight_[33][27] = 0.017316231108659;
    weight_[33][28] = 0.017316231108659;
    weight_[33][29] = 0.017316231108659;
    weight_[33][30] = 0.017316231108659;
    weight_[33][31] = 0.017316231108659;
    weight_[33][32] = 0.017316231108659;


    // 37 Point Rule (Order 13):
    order_to_num_points_[13] = 37;
    ksi_[37].resize(37);
    ksi_[37][0] = 0.333333333333333;
    ksi_[37][1] = 0.009903630120591;
    ksi_[37][2] = 0.495048184939705;
    ksi_[37][3] = 0.495048184939705;
    ksi_[37][4] = 0.062566729780852;
    ksi_[37][5] = 0.468716635109574;
    ksi_[37][6] = 0.468716635109574;
    ksi_[37][7] = 0.170957326397447;
    ksi_[37][8] = 0.414521336801277;
    ksi_[37][9] = 0.414521336801277;
    ksi_[37][10] = 0.541200855914337;
    ksi_[37][11] = 0.229399572042831;
    ksi_[37][12] = 0.229399572042831;
    ksi_[37][13] = 0.771151009607340;
    ksi_[37][14] = 0.114424495196330;
    ksi_[37][15] = 0.114424495196330;
    ksi_[37][16] = 0.950377217273082;
    ksi_[37][17] = 0.024811391363459;
    ksi_[37][18] = 0.024811391363459;
    ksi_[37][19] = 0.094853828379579;
    ksi_[37][20] = 0.268794997058761;
    ksi_[37][21] = 0.636351174561660;
    ksi_[37][22] = 0.268794997058761;
    ksi_[37][23] = 0.636351174561660;
    ksi_[37][24] = 0.094853828379579;
    ksi_[37][25] = 0.018100773278807;
    ksi_[37][26] = 0.291730066734288;
    ksi_[37][27] = 0.690169159986905;
    ksi_[37][28] = 0.291730066734288;
    ksi_[37][29] = 0.690169159986905;
    ksi_[37][30] = 0.018100773278807;
    ksi_[37][31] = 0.022233076674090;
    ksi_[37][32] = 0.126357385491669;
    ksi_[37][33] = 0.851409537834241;
    ksi_[37][34] = 0.126357385491669;
    ksi_[37][35] = 0.851409537834241;
    ksi_[37][36] = 0.022233076674090;

    eta_[37].resize(37);
    eta_[37][0] = 0.333333333333333;
    eta_[37][1] = 0.495048184939705;
    eta_[37][2] = 0.495048184939705;
    eta_[37][3] = 0.009903630120591;
    eta_[37][4] = 0.468716635109574;
    eta_[37][5] = 0.468716635109574;
    eta_[37][6] = 0.062566729780852;
    eta_[37][7] = 0.414521336801277;
    eta_[37][8] = 0.414521336801277;
    eta_[37][9] = 0.170957326397447;
    eta_[37][10] = 0.229399572042831;
    eta_[37][11] = 0.229399572042831;
    eta_[37][12] = 0.541200855914337;
    eta_[37][13] = 0.114424495196330;
    eta_[37][14] = 0.114424495196330;
    eta_[37][15] = 0.771151009607340;
    eta_[37][16] = 0.024811391363459;
    eta_[37][17] = 0.024811391363459;
    eta_[37][18] = 0.950377217273082;
    eta_[37][19] = 0.268794997058761;
    eta_[37][20] = 0.636351174561660;
    eta_[37][21] = 0.094853828379579;
    eta_[37][22] = 0.094853828379579;
    eta_[37][23] = 0.268794997058761;
    eta_[37][24] = 0.636351174561660;
    eta_[37][25] = 0.291730066734288;
    eta_[37][26] = 0.690169159986905;
    eta_[37][27] = 0.018100773278807;
    eta_[37][28] = 0.018100773278807;
    eta_[37][29] = 0.291730066734288;
    eta_[37][30] = 0.690169159986905;
    eta_[37][31] = 0.126357385491669;
    eta_[37][32] = 0.851409537834241;
    eta_[37][33] = 0.022233076674090;
    eta_[37][34] = 0.022233076674090;
    eta_[37][35] = 0.126357385491669;
    eta_[37][36] = 0.851409537834241;

    weight_[37].resize(37);
    weight_[37][0] = 0.052520923400802;
    weight_[37][1] = 0.011280145209330;
    weight_[37][2] = 0.011280145209330;
    weight_[37][3] = 0.011280145209330;
    weight_[37][4] = 0.031423518362454;
    weight_[37][5] = 0.031423518362454;
    weight_[37][6] = 0.031423518362454;
    weight_[37][7] = 0.047072502504194;
    weight_[37][8] = 0.047072502504194;
    weight_[37][9] = 0.047072502504194;
    weight_[37][10] = 0.047363586536355;
    weight_[37][11] = 0.047363586536355;
    weight_[37][12] = 0.047363586536355;
    weight_[37][13] = 0.031167529045794;
    weight_[37][14] = 0.031167529045794;
    weight_[37][15] = 0.031167529045794;
    weight_[37][16] = 0.007975771465074;
    weight_[37][17] = 0.007975771465074;
    weight_[37][18] = 0.007975771465074;
    weight_[37][19] = 0.036848402728732;
    weight_[37][20] = 0.036848402728732;
    weight_[37][21] = 0.036848402728732;
    weight_[37][22] = 0.036848402728732;
    weight_[37][23] = 0.036848402728732;
    weight_[37][24] = 0.036848402728732;
    weight_[37][25] = 0.017401463303822;
    weight_[37][26] = 0.017401463303822;
    weight_[37][27] = 0.017401463303822;
    weight_[37][28] = 0.017401463303822;
    weight_[37][29] = 0.017401463303822;
    weight_[37][30] = 0.017401463303822;
    weight_[37][31] = 0.015521786839045;
    weight_[37][32] = 0.015521786839045;
    weight_[37][33] = 0.015521786839045;
    weight_[37][34] = 0.015521786839045;
    weight_[37][35] = 0.015521786839045;
    weight_[37][36] = 0.015521786839045;


    // 42 Point Rule (Order 14):
    order_to_num_points_[14] = 42;
    ksi_[42].resize(42);
    ksi_[42][0] = 0.022072179275643;
    ksi_[42][1] = 0.488963910362179;
    ksi_[42][2] = 0.488963910362179;
    ksi_[42][3] = 0.164710561319092;
    ksi_[42][4] = 0.417644719340454;
    ksi_[42][5] = 0.417644719340454;
    ksi_[42][6] = 0.453044943382323;
    ksi_[42][7] = 0.273477528308839;
    ksi_[42][8] = 0.273477528308839;
    ksi_[42][9] = 0.645588935174913;
    ksi_[42][10] = 0.177205532412543;
    ksi_[42][11] = 0.177205532412543;
    ksi_[42][12] = 0.876400233818255;
    ksi_[42][13] = 0.061799883090873;
    ksi_[42][14] = 0.061799883090873;
    ksi_[42][15] = 0.961218077502598;
    ksi_[42][16] = 0.019390961248701;
    ksi_[42][17] = 0.019390961248701;
    ksi_[42][18] = 0.057124757403648;
    ksi_[42][19] = 0.172266687821356;
    ksi_[42][20] = 0.770608554774996;
    ksi_[42][21] = 0.172266687821356;
    ksi_[42][22] = 0.770608554774996;
    ksi_[42][23] = 0.057124757403648;
    ksi_[42][24] = 0.092916249356972;
    ksi_[42][25] = 0.336861459796345;
    ksi_[42][26] = 0.570222290846683;
    ksi_[42][27] = 0.336861459796345;
    ksi_[42][28] = 0.570222290846683;
    ksi_[42][29] = 0.092916249356972;
    ksi_[42][30] = 0.014646950055654;
    ksi_[42][31] = 0.298372882136258;
    ksi_[42][32] = 0.686980167808088;
    ksi_[42][33] = 0.298372882136258;
    ksi_[42][34] = 0.686980167808088;
    ksi_[42][35] = 0.014646950055654;
    ksi_[42][36] = 0.001268330932872;
    ksi_[42][37] = 0.118974497696957;
    ksi_[42][38] = 0.879757171370171;
    ksi_[42][39] = 0.118974497696957;
    ksi_[42][40] = 0.879757171370171;
    ksi_[42][41] = 0.001268330932872;

    eta_[42].resize(42);
    eta_[42][0] = 0.488963910362179;
    eta_[42][1] = 0.488963910362179;
    eta_[42][2] = 0.022072179275643;
    eta_[42][3] = 0.417644719340454;
    eta_[42][4] = 0.417644719340454;
    eta_[42][5] = 0.164710561319092;
    eta_[42][6] = 0.273477528308839;
    eta_[42][7] = 0.273477528308839;
    eta_[42][8] = 0.453044943382323;
    eta_[42][9] = 0.177205532412543;
    eta_[42][10] = 0.177205532412543;
    eta_[42][11] = 0.645588935174913;
    eta_[42][12] = 0.061799883090873;
    eta_[42][13] = 0.061799883090873;
    eta_[42][14] = 0.876400233818255;
    eta_[42][15] = 0.019390961248701;
    eta_[42][16] = 0.019390961248701;
    eta_[42][17] = 0.961218077502598;
    eta_[42][18] = 0.172266687821356;
    eta_[42][19] = 0.770608554774996;
    eta_[42][20] = 0.057124757403648;
    eta_[42][21] = 0.057124757403648;
    eta_[42][22] = 0.172266687821356;
    eta_[42][23] = 0.770608554774996;
    eta_[42][24] = 0.336861459796345;
    eta_[42][25] = 0.570222290846683;
    eta_[42][26] = 0.092916249356972;
    eta_[42][27] = 0.092916249356972;
    eta_[42][28] = 0.336861459796345;
    eta_[42][29] = 0.570222290846683;
    eta_[42][30] = 0.298372882136258;
    eta_[42][31] = 0.686980167808088;
    eta_[42][32] = 0.014646950055654;
    eta_[42][33] = 0.014646950055654;
    eta_[42][34] = 0.298372882136258;
    eta_[42][35] = 0.686980167808088;
    eta_[42][36] = 0.118974497696957;
    eta_[42][37] = 0.879757171370171;
    eta_[42][38] = 0.001268330932872;
    eta_[42][39] = 0.001268330932872;
    eta_[42][40] = 0.118974497696957;
    eta_[42][41] = 0.879757171370171;

    weight_[42].resize(42);
    weight_[42][0] = 0.021883581369429;
    weight_[42][1] = 0.021883581369429;
    weight_[42][2] = 0.021883581369429;
    weight_[42][3] = 0.032788353544125;
    weight_[42][4] = 0.032788353544125;
    weight_[42][5] = 0.032788353544125;
    weight_[42][6] = 0.051774104507292;
    weight_[42][7] = 0.051774104507292;
    weight_[42][8] = 0.051774104507292;
    weight_[42][9] = 0.042162588736993;
    weight_[42][10] = 0.042162588736993;
    weight_[42][11] = 0.042162588736993;
    weight_[42][12] = 0.014433699669777;
    weight_[42][13] = 0.014433699669777;
    weight_[42][14] = 0.014433699669777;
    weight_[42][15] = 0.004923403602400;
    weight_[42][16] = 0.004923403602400;
    weight_[42][17] = 0.004923403602400;
    weight_[42][18] = 0.024665753212564;
    weight_[42][19] = 0.024665753212564;
    weight_[42][20] = 0.024665753212564;
    weight_[42][21] = 0.024665753212564;
    weight_[42][22] = 0.024665753212564;
    weight_[42][23] = 0.024665753212564;
    weight_[42][24] = 0.038571510787061;
    weight_[42][25] = 0.038571510787061;
    weight_[42][26] = 0.038571510787061;
    weight_[42][27] = 0.038571510787061;
    weight_[42][28] = 0.038571510787061;
    weight_[42][29] = 0.038571510787061;
    weight_[42][30] = 0.014436308113534;
    weight_[42][31] = 0.014436308113534;
    weight_[42][32] = 0.014436308113534;
    weight_[42][33] = 0.014436308113534;
    weight_[42][34] = 0.014436308113534;
    weight_[42][35] = 0.014436308113534;
    weight_[42][36] = 0.005010228838501;
    weight_[42][37] = 0.005010228838501;
    weight_[42][38] = 0.005010228838501;
    weight_[42][39] = 0.005010228838501;
    weight_[42][40] = 0.005010228838501;
    weight_[42][41] = 0.005010228838501;
}




